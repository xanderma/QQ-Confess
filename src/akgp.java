
public class akgp extends akgo {
    private static final int[] a = new int[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
    private static final int[] b = new int[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
    private static final int[] c = new int[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, 18, 37, 21, 41, 20, 49, 4, 13, 39, 22, -1, -1, -1, -2, -1, -1, -1, 50, 47, 24, 15, 36, 56, 46, 26, 9, 31, 19, 1, 61, 14, 27, 52, 25, 58, 28, 38, 30, 29, 60, 63, 6, 45, -1, -1, -1, -1, 2, -1, 17, 43, 32, 62, 3, 59, 44, 23, 51, 34, 53, 55, 33, 0, 12, 11, 57, 5, 54, 40, 7, 16, 35, 10, 42, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
    private int b2;
    private int c2;
    private final int[] d;

    public akgp(int var1, byte[] var2) {
        this.info = var2;
        int[] var3;
        if ((var1 & 8) == 0) {
            var3 = a;
        } else {
            var3 = c;
        }

        this.d = var3;
        this.b2 = 0;
        this.c2 = 0;
    }

    public boolean a(byte[] var1, int var2, int var3, boolean var4) {
        if (this.b2 == 6) {
            return false;
        } else {
            int var11 = var3 + var2;
            int var6 = this.b2;
            var3 = this.c2;
            int var5 = 0;
            byte[] var12 = this.info;

            int var7;
            int var10;
            for(int[] var13 = this.d; var2 < var11; var2 = var10 + 1) {
                var7 = var5;
                int var8 = var3;
                var10 = var2;
                if (var6 == 0) {
                    int var9 = var2;

                    for(var2 = var3; var9 + 4 <= var11; var2 = var3) {
                        var3 = var13[var1[var9] & 255] << 18 | var13[var1[var9 + 1] & 255] << 12 | var13[var1[var9 + 2] & 255] << 6 | var13[var1[var9 + 3] & 255];
                        var2 = var3;
                        if (var3 < 0) {
                            break;
                        }

                        var12[var5 + 2] = (byte)var3;
                        var12[var5 + 1] = (byte)(var3 >> 8);
                        var12[var5] = (byte)(var3 >> 16);
                        var5 += 3;
                        var9 += 4;
                    }

                    var7 = var5;
                    var8 = var2;
                    var10 = var9;
                    if (var9 >= var11) {
                        var3 = var2;
                        break;
                    }
                }

                label88: {
                    var3 = var13[var1[var10] & 255];
                    switch(var6) {
                        case 0:
                            if (var3 >= 0) {
                                var2 = var6 + 1;
                                var5 = var7;
                                break label88;
                            }

                            if (var3 != -1) {
                                this.b2 = 6;
                                return false;
                            }
                            break;
                        case 1:
                            if (var3 >= 0) {
                                var3 |= var8 << 6;
                                var2 = var6 + 1;
                                var5 = var7;
                                break label88;
                            }

                            if (var3 != -1) {
                                this.b2 = 6;
                                return false;
                            }
                            break;
                        case 2:
                            if (var3 >= 0) {
                                var3 |= var8 << 6;
                                var2 = var6 + 1;
                                var5 = var7;
                                break label88;
                            }

                            if (var3 == -2) {
                                var12[var7] = (byte)(var8 >> 4);
                                var2 = 4;
                                var5 = var7 + 1;
                                var3 = var8;
                                break label88;
                            }

                            if (var3 != -1) {
                                this.b2 = 6;
                                return false;
                            }
                            break;
                        case 3:
                            if (var3 >= 0) {
                                var3 |= var8 << 6;
                                var12[var7 + 2] = (byte)var3;
                                var12[var7 + 1] = (byte)(var3 >> 8);
                                var12[var7] = (byte)(var3 >> 16);
                                var5 = var7 + 3;
                                var2 = 0;
                                break label88;
                            }

                            if (var3 == -2) {
                                var12[var7 + 1] = (byte)(var8 >> 2);
                                var12[var7] = (byte)(var8 >> 10);
                                var5 = var7 + 2;
                                var2 = 5;
                                var3 = var8;
                                break label88;
                            }

                            if (var3 != -1) {
                                this.b2 = 6;
                                return false;
                            }
                            break;
                        case 4:
                            if (var3 == -2) {
                                var2 = var6 + 1;
                                var5 = var7;
                                var3 = var8;
                                break label88;
                            }

                            if (var3 != -1) {
                                this.b2 = 6;
                                return false;
                            }
                            break;
                        case 5:
                            if (var3 != -1) {
                                this.b2 = 6;
                                return false;
                            }
                    }

                    var2 = var6;
                    var3 = var8;
                    var5 = var7;
                }

                var6 = var2;
            }

            if (!var4) {
                this.b2 = var6;
                this.c2 = var3;
                this.length = var5;
                return true;
            } else {
                var2 = var5;
                switch(var6) {
                    case 0:
                        break;
                    case 1:
                        this.b2 = 6;
                        return false;
                    case 2:
                        var12[var5] = (byte)(var3 >> 4);
                        var2 = var5 + 1;
                        break;
                    case 3:
                        var7 = var5 + 1;
                        var12[var5] = (byte)(var3 >> 10);
                        var2 = var7 + 1;
                        var12[var7] = (byte)(var3 >> 2);
                        break;
                    case 4:
                        this.b2 = 6;
                        return false;
                    default:
                        var2 = var5;
                }

                this.b2 = var6;
                this.length = var2;
                return true;
            }
        }
    }
}
